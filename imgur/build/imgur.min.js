/*! imgur 2.1.0 | (c) 2018 Pedro Rog√©rio | MIT License */
! function(t, e) {
    "use strict";
    "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? module.exports = e() : t.Imgur = e()
}(this, function() {
    "use strict";
    var e = function(t) {
        if (!(this && this instanceof e)) return new e(t);
        if (t || (t = {}), !t.clientid) throw "Provide a valid Client Id here: https://apidocs.imgur.com/";
        this.clientid = t.clientid, this.endpoint = "https://api.imgur.com/3/image", this.callback = t.callback || void 0, this.dropzone = document.querySelectorAll(".dropzone"), this.run()
    };
    return e.prototype = {
        createEls: function(t, e, i) {
            var n, a = document.createElement(t);
            for (n in e) e.hasOwnProperty(n) && (a[n] = e[n]);
            return i && a.appendChild(document.createTextNode(i)), a
        },
        insertAfter: function(t, e) {
            t.parentNode.insertBefore(e, t.nextSibling)
        },
        post: function(t, e, i) {
            var n = new XMLHttpRequest;
            n.open("POST", t, !0), n.setRequestHeader("Authorization", "Client-ID " + this.clientid), n.onreadystatechange = function() {
                if (4 === this.readyState) {
                    if (!(200 <= this.status && this.status < 300)) throw new Error(this.status + " - " + this.statusText);
                    var e = "";
                    try {
                        e = JSON.parse(this.responseText)
                    } catch (t) {
                        e = this.responseText
                    }
                    i.call(window, e)
                }
            }, n.send(e), n = null
        },
        createDragZone: function() {
            var e, i;
            e = this.createEls("p", {}, "Dropzone"), i = this.createEls("input", {
                type: "file",
                multiple: "multiple",
                accept: "image/*"
            }), Array.prototype.forEach.call(this.dropzone, function(t) {
                t.appendChild(e), t.appendChild(i), this.status(t), this.upload(t)
            }.bind(this))
        },
        loading: function() {
            var t, e;
            t = this.createEls("div", {
                className: "loading-modal"
            }), e = this.createEls("img", {
                className: "loading-image",
                src: "./svg/loading-spin.svg"
            }), t.appendChild(e), document.body.appendChild(t)
        },
        status: function(t) {
            var e = this.createEls("div", {
                className: "status"
            });
            this.insertAfter(t, e)
        },
        matchFiles: function(t, e) {
            var i = e.nextSibling;
            if (t.type.match(/image/) && "image/svg+xml" !== t.type) {
                document.body.classList.add("busy"), i.classList.remove("bg-success", "bg-danger"), i.innerHTML = "";
                var n = new FormData;
                n.append("image", t), this.post(this.endpoint, n, function(t) {
                    document.body.classList.remove("busy"), "function" == typeof this.callback && this.callback.call(this, t)
                }.bind(this))
            } else i.classList.remove("bg-success"), i.classList.add("bg-danger"), i.innerHTML = "Invalid archive"
        },
        upload: function(i) {
            var e, n, a, s;
            i.addEventListener("change", function(t) {
                if (t.target && "INPUT" === t.target.nodeName && "file" === t.target.type)
                    for (n = t.target.files, a = 0, s = n.length; a < s; a += 1) e = n[a], this.matchFiles(e, i)
            }.bind(this), !1), ["dragenter", "dragleave", "dragover", "drop"].map(function(e) {
                i.addEventListener(e, function(t) {
                    t.target && "INPUT" === t.target.nodeName && "file" === t.target.type && ("dragleave" === e || "drop" === e ? t.target.parentNode.classList.remove("dropzone-dragging") : t.target.parentNode.classList.add("dropzone-dragging"))
                }, !1)
            })
        },
        run: function() {
            document.querySelector(".loading-modal") || this.loading(), this.createDragZone()
        }
    }, e
});
// do not touch above

let dropZone = document.querySelector('.dropzone')
let textBox = document.querySelector('#input-text')
let myInput = ""
//
let createSheet = document.querySelector('#create-sheet')
let newCsv = document.querySelector('#new-csv')
let sheetInput = ""
let productDropdown = document.querySelector("#pageSubmenu");
let selectSheet = document.querySelector("#select-sheet");
let hiddenNum = document.getElementById('hidden-num')
let postSheetId = "1"
let deleteButton = document.querySelector("#delete-button");
let csvTable = document.querySelector(".csv-table");
let tableBody = document.querySelector(".table-body");


selectSheet.onchange = () => {postSheetId = event.target.value};
selectSheet.onclick = () => {postSheetId = event.target.value};

deleteButton.addEventListener('click', () => {
  let x = window.confirm("Are you sure you want to delete this?")
if (x){
  selectSheet.removeChild(document.getElementById(`selector-${postSheetId}`))
  productDropdown.removeChild(document.getElementById(`dropdown-${postSheetId}`))
  fetch(`http://localhost:3000/api/v1/product_sheets/${postSheetId}`, {
  method: 'DELETE'
})
} else {
  window.alert("Cancelled")
}

});

newCsv.addEventListener('click', () => {
  if (createSheet.value!=""){
    createSheet.value = ""
    fetch('http://localhost:3000/api/v1/product_sheets', {
    method: 'POST',
    headers: {
      "Content-Type" : "application/json; charset=utf-8"
    },
    body: JSON.stringify({
      name: sheetInput
    })
  })
  .then( () => {
    fetch('http://localhost:3000/api/v1/product_sheets')
    .then( response => response.json())
    .then( json => {
      let jsonArr = json.map( (product) => product)
      let productId = jsonArr[jsonArr.length-1].id
      let productName = jsonArr[jsonArr.length-1].name
      selectSheet.innerHTML += `<option id="selector-${productId}" value="${productId}">${productName}</option>`
      productDropdown.innerHTML += `
      <li id="dropdown-${productId}" class="listy">
        <a href="#sheetSubmenu-${productId}" data-toggle="collapse" aria-expanded="false" class="dropdown-toggle">${productName}</a>
        <ul class="collapse list-unstyled" id="sheetSubmenu-${productId}">
        <div class="flex">
          <a class="btn btn-info" href="http://localhost:3000/api/v1/product_sheets/download/${productId}">Download CSV</a>
          <a class="btn btn-warning" id="show-button-${productId}" data-id="${productId}">Display</a>
        </div>
        </ul>
      </li>
      `
    })
    .then( () => sheetInput = "")
    .then( () => {
      $('.listy').click( function(e) {
          $('.listy > .collapse').collapse('hide');
      });
    })
  })
} else {
  alert("Please enter a name!")
}

})

createSheet.addEventListener('keyup', () => {
  sheetInput = event.target.value
})

textBox.addEventListener('keyup', () => {
  myInput = event.target.value
});

productDropdown.addEventListener('click', () => {
  if (event.target.classList.value === "btn btn-warning") {
    let sheetId = event.target.dataset.id
    if (event.target.innerText === "Display") {
      // Hide Dropzone
      dropZone.style.display = 'none'

      // Show Table
      csvTable.style.display = 'block'

      // Fetch data to fill in csvTable
      fetch(`http://localhost:3000/api/v1/product_sheets/${sheetId}`)
      .then(response => response.json())
      .then(productSheet => {
        productSheet.products.forEach(product => {
          let id = product.id
          let name = product.name
          let tags = product.tags
          let price = product.price
          let url = product.url
          tableBody.innerHTML += `
          <tr>
            <th scope="row">${id}</th>
            <td style="font-size:14px">${name}</td>
            <td style="font-size:14px">${tags}</td>
            <td style="font-size:14px">${price}</td>
            <td><div class="img" style="background-image:url(${url});"></div></td>
          </tr>
          `
        })
      })

      // End Fetch request


      event.target.innerText = "Go Back"
    } else if(event.target.innerText === "Go Back") {
      // Show Dropzone
      dropZone.style.display = 'block'
      // Hide Table
      tableBody.innerHTML = ""
      csvTable.style.display = 'none'

      event.target.innerText = "Display"
    }
  }
})

  var callback = function (res) {
     if (res.success === true) {
         textBox.value = ""
         console.log(res.data.link);
         fetch('http://localhost:3000/api/v1/products', {
         method: 'POST',
         headers: {
           "Content-Type" : "application/json; charset=utf-8"
         },
         body: JSON.stringify({
           url: res.data.link,
           price: myInput,
           product_sheet_id: postSheetId
         })
       }).then(response => myInput = "")
     }
 };

 new Imgur({
     clientid: '',
     callback: callback
 });
